(()=>{"use strict";var e={273:(e,n,t)=>{t.d(n,{R:()=>S});let s=document.getElementById("spinner");const c=new class{handleClear(){s.innerHTML=""}render(){s.innerHTML='\n        \t<div class="spinner-container">\n        \t\t<img class="spinner__img" src="../components/Spinner/img/spinner.svg" />\n        \t</div>\n        '}},i=new class{constructor(){this.keyName="products"}getProducts(){const e=localStorage.getItem(this.keyName);return null!==e?JSON.parse(e):[]}putProducts(e){let n=this.getProducts(),t=!1;const s=n.indexOf(e);return-1===s?(n.push(e),t=!0):n.splice(s,1),localStorage.setItem(this.keyName,JSON.stringify(n)),{pushProduct:t,products:n}}},l=document.getElementById("shopping"),r=new class{handlerClear(){l.innerHTML=""}render(){const e=i.getProducts();let n="",t=0;S().forEach((({id:s,name:c,price:i})=>{-1!==e.indexOf(s)&&(n+=`\n                    <tr>\n                        <td class="shopping-element__name">‚ö°Ô∏è ${c}</td>\n                        <td class="shopping-element__price">${i.toLocaleString()} USD</td>\n                    </tr>\n                `,t+=i)}));const s=`\n            <div class="shopping-container">\n                <div id="shopping__close" class="shopping__close" onclick=""></div>\n                <table>\n                    ${n}\n                    <tr>\n                        <td class="shopping-element__name">üí• –°—É–º–∞ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤:</td>\n                        <td class="shopping-element__price">${t.toLocaleString()} USD</td>\n                    </tr>\n                </table>\n            </div>\n        `;l.innerHTML=s}},a=document.getElementById("header"),o=new class{handlerOpenShoppingPage(){r.render()}render(e){a.innerHTML="";const n=`\n            <div class="header-container">\n                <div id="open_shopping" class="header-counter" onclick="">\n                üõí ${e}\n                </div>\n            </div>\n        <div class="check-box">\n            <div class="check-item">\n            <input type="checkbox" class="check" value="all" id="all" name="all" checked>\n            <label for="all">–í—Å—ñ</label>\n            </div>\n            <div class="check-item">\n                <input type="checkbox" class="check" value="m" id="m" name="m">\n                <label for="m">–ß–æ–ª–æ–≤—ñ—á—ñ</label>\n            </div>\n            <div class="check-item">\n            <input type="checkbox" class="check" value="f" id="f" name="f">\n            <label for="f">–ñ—ñ–Ω–æ—á—ñ</label>\n            </div>\n        </div>\n        `;a.innerHTML=n}},d=document.getElementById("products"),p=new class{constructor(){this.classNameActive="products-element__btn_active",this.labelAdd="–î–æ–±–∞–≤–∏—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É",this.labelRemove="–í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∫–æ—Ä–∑–∏–Ω–∏"}handlerSetLocatStorage(e,n){const{pushProduct:t,products:s}=i.putProducts(n);t?(e.classList.add(this.classNameActive),e.innerText=this.labelRemove):(e.classList.remove(this.classNameActive),e.innerText=this.labelAdd),o.render(s.length)}render(){let e=S();const n=i.getProducts();let t="";e.forEach((({id:e,name:s,price:c,img:i})=>{let l="",r="";-1===n.indexOf(e)?r=this.labelAdd:(l=" "+this.classNameActive,r=this.labelRemove),t+=`\n                    <li class="products-element">\n                        <span class="products-element__name">${s}</span>\n                        <img class="products-element__img" src="${i}" />\n                        <span class="products-element__price">\n                            ‚ö°Ô∏è ${c.toLocaleString()} USD\n                        </span>\n                        <button value="${e}" id="add_prod" class="products-element__btn${l}" onclick="">\n                            ${r}\n                        </button>\n                        <button value="${e}" id="show_des" class="description-element__btn" onclick=""> –û–ø–∏—Å </button>\n                    </li>\n                `}));const s=`\n            <ul class="products-container">\n                ${t}\n            </ul>\n        `;function c(){let n=document.querySelector('.check[value="m"]'),t=document.querySelector('.check[value="f"]'),s="";const c=i.getProducts();n.checked&&!t.checked?(s="",e.forEach((({id:e,name:n,price:t,img:i,gender:l})=>{let r="",a="";-1===c.indexOf(e)?a=this.labelAdd:(r=" "+this.classNameActive,a=this.labelRemove),"m"===l&&(s+=`\n                    <li class="products-element">\n                        <span class="products-element__name">${n}</span>\n                        <img class="products-element__img" src="${i}" />\n                        <span class="products-element__price">\n                            ‚ö°Ô∏è ${t.toLocaleString()} USD\n                        </span>\n                        <button value="${e}" id="add_prod" class="products-element__btn${r}" onclick="">\n                            –î–æ–¥–∞—Ç–∏/–í–∏–¥–∞–ª–∏—Ç–∏\n                        </button>\n                        <button value="${e}" id="show_des" class="description-element__btn" onclick=""> –û–ø–∏—Å </button>\n                    </li>\n                `)}))):t.checked&&!n.checked?(s="",e.forEach((({id:e,name:n,price:t,img:i,gender:l})=>{let r="",a="";-1===c.indexOf(e)?this.labelAdd:r=" "+this.classNameActive,"f"===l&&(s+=`\n                <li class="products-element">\n                    <span class="products-element__name">${n}</span>\n                    <img class="products-element__img" src="${i}" />\n                    <span class="products-element__price">\n                        ‚ö°Ô∏è ${t.toLocaleString()} USD\n                    </span>\n                    <button value="${e}" id="add_prod" class="products-element__btn${r}" onclick="">\n                        –î–æ–¥–∞—Ç–∏/–í–∏–¥–∞–ª–∏—Ç–∏\n                    </button>\n                    <button value="${e}" id="show_des" class="description-element__btn" onclick=""> –û–ø–∏—Å </button>\n                </li>\n            `)}))):(s="",e.forEach((({id:e,name:n,price:t,img:i})=>{let l="",r="";-1===c.indexOf(e)?this.labelAdd:l=" "+this.classNameActive,s+=`\n            <li class="products-element">\n                <span class="products-element__name">${n}</span>\n                <img class="products-element__img" src="${i}" />\n                <span class="products-element__price">\n                    ‚ö°Ô∏è ${t.toLocaleString()} USD\n                </span>\n                <button class="products-element__btn${l}" onclick="">\n                    –î–æ–¥–∞—Ç–∏/–í–∏–¥–∞–ª–∏—Ç–∏\n                </button>\n                <button value="${e}" id="show_des" class="description-element__btn" onclick=""> –û–ø–∏—Å </button>\n            </li>\n        `})));const l=`\n        <ul class="products-container">\n            ${s}\n        </ul>\n        `;d.innerHTML=l}d.innerHTML=s,document.querySelectorAll(".check").forEach((e=>{e.onclick=c}))}},m=document.getElementById("footer"),u=new class{render(){m.innerHTML='\n        <div class="footer">\n          <div class="footer__row">\n            <div class="footer__text">üìû: +390560230120 ,\n            Stay Home üè†\n            </div>\n          </div>\n         </div>\n        '}},h=document.getElementById("menu"),g=new class{render(){h.innerHTML='\n        <div class="dws-menu">\n         <ul>\n           <li route="/watchShop/index"><a href="index"><i></i>–ì–æ–ª–æ–≤–Ω–∞</a></li>\n           <li route="/watchShop/share"><a href="share"><i></i>–ê–∫—Ü—ñ—ó</a></li>\n           <li route="/watchShop/cart"><a href="cart"><i></i>–ö–æ—Ä–∑–∏–Ω–∞</a></li>\n           <li route="/watchShop/order"><a href="order"><i></i>–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</a></li>\n         </ul> \n      </div>\n        '}},_=document.getElementById("slider"),v=new class{render(){!function t(){e=setTimeout((function(){var s=document.getElementById("row");(n-=128)<-512&&(n=0,clearTimeout(e)),s.style.left=n+"px",t()}),3e3)}();var e,n=0;_.innerHTML='\n      <div id="row">\n\t\t\t<img src="img/1.jpg" alt ="">\n\t\t\t<img src="img/2.jpg" alt ="">\n\t\t\t<img src="img/3.jpg" alt ="">\n\t\t\t<img src="img/4.jpg" alt ="">\n\t\t\t<img src="img/5.jpg" alt ="">\n      <img src="img/6.jpg" alt ="">\n      </div>\n\n      '}},b=new class{render(){ROOT_ERROR.innerHTML='\n        \t<div class="error-container">\n                <div class="error-message">\n                    <h3>–®–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫</h3>\n                    <p>–ü–æ—Ö–æ–¥—É –Ω–µ —Ç–∞ —Å—Å–∏–ª–∫–∞ –∞–±–æ –∑–Ω–æ–≤ –∑–∞–±—É–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä</p>\n                </div>\n        \t</div>\n        '}},f=document.getElementById("description"),k=new class{handlerClear(){f.innerHTML=""}handlerOpenDescriptionPage(e,n){k.render(n)}render(e){let n=S(),t="",s=e;n.forEach((({id:e,name:n,price:c,img:i,description:l,gender:r})=>{e==s&&(t+=`\n                <span class="description-element__name">${n}</span>\n                <img class="description-element__img" src="${i}" />\n                <span class="description-element__price">\n                    ‚ö°Ô∏è ${c.toLocaleString()} USD\n                </span>\n                <p class="description-element__text">${l}</p>\n                <p class="description-element__gender">–°—Ç–∞—Ç—å: ${r}</p>\n                `)}));const c=`\n            <div class="description-container">\n                <div id="description__close" class="description__close" onclick=""></div>\n                <table>\n                    ${t}\n                </table>\n            </div>\n        `;f.innerHTML=c}};c.render();let $=[];fetch("server/db.json").then((e=>e.json())).then((e=>{$=e,setTimeout((()=>{c.handleClear(),function(){!function(){console.log("DOM has loaded"),Array.from(document.querySelectorAll("[route]"));var e=new function(e,n){return{name:"myFirstRouter",routes:[{path:"/index",name:"Main"},{path:"/cart",name:"CART"},{path:"/share",name:"SHARE"},{path:"/order",name:"ORDER"}]}}(0,0),n=window.location.pathname;if(""===n||"/index"===n)console.log("You are on the Main page");else{var t=e.routes.filter((function(e){return e.path===n}))[0];t.name&&console.log("You are on the "+t.name+" path")}}();let e=i.getProducts();o.render(e.length),p.render(),u.render(),g.render(),v.render()}()}),1e3)})).catch((()=>{c.handleClear(),b.render()}));const S=()=>$;document.addEventListener("click",(e=>{document.getElementById("open_shopping").addEventListener("click",(function(){o.handlerOpenShoppingPage(),document.getElementById("shopping__close").addEventListener("click",(function(){r.handlerClear()}))})),S().forEach((({id:n})=>{n===e.target.value&&("add_prod"===e.target.id?p.handlerSetLocatStorage(void 0,n):"show_des"===e.target.id&&(k.handlerOpenDescriptionPage(void 0,n),document.getElementById("description__close").addEventListener("click",(function(){f.innerHTML=""}))))}))}))}},n={};function t(s){if(n[s])return n[s].exports;var c=n[s]={exports:{}};return e[s](c,c.exports,t),c.exports}t.d=(e,n)=>{for(var s in n)t.o(n,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:n[s]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t(273)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,